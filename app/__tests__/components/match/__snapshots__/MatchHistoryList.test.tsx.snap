// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MatchHistoryList> renders correctly 1`] = `
<RCTScrollView
  contentContainerStyle={
    Object {
      "paddingRight": 16,
    }
  }
  data={Array []}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReached={[Function]}
  onEndReachedThreshold={0.7}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View />
</RCTScrollView>
`;

exports[`<MatchHistoryList> renders correctly when empty array with data provided 1`] = `
<RCTScrollView
  contentContainerStyle={
    Object {
      "paddingRight": 16,
    }
  }
  data={Array []}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReached={[Function]}
  onEndReachedThreshold={0.7}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View />
</RCTScrollView>
`;

exports[`<MatchHistoryList> renders correctly when valid data provided 1`] = `
<RCTScrollView
  contentContainerStyle={
    Object {
      "paddingRight": 16,
    }
  }
  data={
    Array [
      Object {
        "id": 5,
        "type": "hehe",
        "updated_at": "21:37",
        "winner": true,
      },
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReached={[Function]}
  onEndReachedThreshold={0.7}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        accessible={true}
        focusable={false}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            false,
            Array [
              Object {
                "padding": 8,
              },
              undefined,
            ],
          ]
        }
      >
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <View
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "height": 40,
                  "justifyContent": "center",
                  "margin": 8,
                  "width": 40,
                },
                Object {
                  "marginLeft": 0,
                  "marginRight": 16,
                },
              ]
            }
          >
            <Text />
          </View>
          <View
            style={
              Array [
                Object {
                  "marginVertical": 6,
                  "paddingLeft": 8,
                },
                Object {
                  "flex": 1,
                  "justifyContent": "center",
                },
              ]
            }
          >
            <Text
              numberOfLines={1}
              selectable={false}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontFamily": "System",
                    "fontWeight": "400",
                    "textAlign": "left",
                  },
                  Array [
                    Object {
                      "fontSize": 16,
                    },
                    Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                    },
                    Object {
                      "fontWeight": "bold",
                    },
                  ],
                ]
              }
            >
              21:37 undefined
            </Text>
            <Text
              numberOfLines={2}
              selectable={false}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontFamily": "System",
                    "fontWeight": "400",
                    "textAlign": "left",
                  },
                  Array [
                    Object {
                      "fontSize": 14,
                    },
                    Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                    },
                    undefined,
                  ],
                ]
              }
            >
              Zwycięstwo w trybie ogólnym
            </Text>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
