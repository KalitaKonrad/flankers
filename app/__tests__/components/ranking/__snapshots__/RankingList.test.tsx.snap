// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RankingList> renders correctly when all data provided 1`] = `
<RCTScrollView
  ListFooterComponent={
    <Button
      onPress={[Function]}
      title="Hehe"
    />
  }
  contentContainerStyle={
    Object {
      "paddingHorizontal": 16,
    }
  }
  data={
    Array [
      Object {
        "created_at": "string",
        "description": "string",
        "elo": 5,
        "id": 5,
        "name": "hehe",
        "owner_id": 5,
        "updated_at": "string",
        "versioned_avatar": "string",
      },
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        accessible={true}
        focusable={false}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            false,
            Array [
              Object {
                "padding": 8,
              },
              Object {
                "backgroundColor": undefined,
              },
            ],
          ]
        }
      >
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <View
            style={
              Object {
                "justifyContent": "center",
                "marginRight": 4,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "#fff",
                  },
                  Object {
                    "borderRadius": 8,
                    "elevation": 0,
                    "height": 40,
                    "width": 40,
                  },
                  Object {
                    "shadowColor": "rgba(0, 0, 0, 0.1)",
                    "shadowOffset": Object {
                      "height": 4,
                      "width": 0,
                    },
                    "shadowOpacity": 1,
                    "shadowRadius": 4,
                  },
                  undefined,
                ]
              }
            >
              <Image
                source={
                  Object {
                    "uri": "string",
                  }
                }
                style={
                  Array [
                    Object {
                      "borderColor": "#FFFFFF",
                    },
                    Object {
                      "borderRadius": 8,
                      "borderWidth": 0,
                      "height": 40,
                      "width": 40,
                    },
                  ]
                }
              />
            </View>
          </View>
          <View
            style={
              Array [
                Object {
                  "marginVertical": 6,
                  "paddingLeft": 8,
                },
                Object {
                  "flex": 1,
                  "justifyContent": "center",
                },
              ]
            }
          >
            <Text
              numberOfLines={1}
              selectable={false}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontFamily": "System",
                    "fontWeight": "400",
                    "textAlign": "left",
                  },
                  Array [
                    Object {
                      "fontSize": 16,
                    },
                    Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                    },
                    Object {
                      "fontWeight": "bold",
                    },
                  ],
                ]
              }
            >
              hehe
            </Text>
            <Text
              numberOfLines={2}
              selectable={false}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontFamily": "System",
                    "fontWeight": "400",
                    "textAlign": "left",
                  },
                  Array [
                    Object {
                      "fontSize": 14,
                    },
                    Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                    },
                    undefined,
                  ],
                ]
              }
            >
              5 punkt√≥w rankingowych
            </Text>
          </View>
          <Text
            style={
              Array [
                Object {
                  "fontSize": 14,
                  "fontWeight": "normal",
                },
                Object {
                  "fontWeight": "bold",
                  "marginRight": 12,
                  "paddingTop": 6,
                  "textAlign": "justify",
                },
              ]
            }
          >
            #
            11
          </Text>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Hehe
          </Text>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`<RankingList> renders correctly when empty array with data provided 1`] = `
<RCTScrollView
  ListFooterComponent={
    <Button
      onPress={[Function]}
      title="Hehe"
    />
  }
  contentContainerStyle={
    Object {
      "paddingHorizontal": 16,
    }
  }
  data={Array []}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Hehe
          </Text>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
